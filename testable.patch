From a3590e9c7d9495ffde2b8955e88cd00ffe5d1796 Mon Sep 17 00:00:00 2001
From: Lukas_Skywalker <lukas.diener@hotmail.com>
Date: Fri, 10 Feb 2023 17:41:43 +0100
Subject: [PATCH] x

---
 apps/api-example/schema-v2.graphql            |   1 -
 .../article/article.private-mutation.ts       | 796 ------------------
 libs/api/src/lib/graphql/mutation.private.ts  | 128 ---
 .../lib/graphql/page/page.private-mutation.ts | 593 -------------
 .../graphql/phrase/phrase.public-queries.ts   | 103 ---
 libs/api/src/lib/graphql/phrase/phrase.ts     |  20 -
 libs/api/src/lib/graphql/query.public.ts      |  16 -
 libs/editor/api-v2/src/lib/graphql.ts         |  43 +-
 libs/membership/api/setup-database.js         |   2 +-
 ...shboard-subscription.resolver.spec.ts.snap |  82 --
 .../dashboard-subscription.resolver.spec.ts   | 565 -------------
 ...chimp-templates-list-success-response.json |  42 -
 12 files changed, 38 insertions(+), 2353 deletions(-)
 delete mode 100644 libs/api/src/lib/graphql/article/article.private-mutation.ts
 delete mode 100644 libs/api/src/lib/graphql/page/page.private-mutation.ts
 delete mode 100644 libs/api/src/lib/graphql/phrase/phrase.public-queries.ts
 delete mode 100644 libs/api/src/lib/graphql/phrase/phrase.ts
 delete mode 100644 libs/membership/api/src/lib/dashboard/subscriptions/__snapshots__/dashboard-subscription.resolver.spec.ts.snap
 delete mode 100644 libs/membership/api/src/lib/dashboard/subscriptions/dashboard-subscription.resolver.spec.ts
 delete mode 100644 libs/membership/api/src/lib/mail-template/__fixtures__/mailchimp-templates-list-success-response.json

diff --git a/apps/api-example/schema-v2.graphql b/apps/api-example/schema-v2.graphql
index e2afddb3..c810e7f5 100644
--- a/apps/api-example/schema-v2.graphql
+++ b/apps/api-example/schema-v2.graphql
@@ -189,7 +189,6 @@ type SubscriptionInterval {
   daysAwayFromEnding: Float!
   id: Float!
   mailTemplate: MailTemplateRef!
-  mailTemplateId: Float!
 }
 
 input SubscriptionIntervalCreateInput {
diff --git a/libs/api/src/lib/graphql/article/article.private-mutation.ts b/libs/api/src/lib/graphql/article/article.private-mutation.ts
deleted file mode 100644
index 43a6a3ee..00000000
--- a/libs/api/src/lib/graphql/article/article.private-mutation.ts
+++ /dev/null
@@ -1,796 +0,0 @@
-import {Prisma, PrismaClient} from '@prisma/client'
-import {Context} from '../../context'
-import {ArticleWithRevisions} from '../../db/article'
-import {DuplicateArticleSlugError, NotFound} from '../../error'
-import {authorise, CanCreateArticle, CanDeleteArticle, CanPublishArticle} from '../permissions'
-
-export const deleteArticleById = async (
-  id: string,
-  authenticate: Context['authenticate'],
-  prisma: PrismaClient
-): Promise<ArticleWithRevisions> => {
-  const {roles} = authenticate()
-  authorise(CanDeleteArticle, roles)
-
-  const article = await prisma.article.findUnique({
-    where: {
-      id
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-
-  if (!article) {
-    throw new NotFound('article', id)
-  }
-
-  await prisma.$transaction([
-    prisma.article.delete({
-      where: {
-        id
-      }
-    }),
-    prisma.articleRevision.deleteMany({
-      where: {
-        id: {
-          in: [article.draftId, article.pendingId, article.publishedId].filter(Boolean) as string[]
-        }
-      }
-    })
-  ])
-
-  return article
-}
-
-type CreateArticleInput = Pick<Prisma.ArticleCreateInput, 'shared'> &
-  Omit<Prisma.ArticleRevisionCreateInput, 'properties' | 'revision'> & {
-    properties: Prisma.MetadataPropertyCreateManyArticleRevisionInput[]
-    authorIDs: Prisma.ArticleRevisionAuthorCreateManyRevisionInput['authorId'][]
-    socialMediaAuthorIDs: Prisma.ArticleRevisionSocialMediaAuthorCreateManyRevisionInput['authorId'][]
-  }
-
-export const createArticle = async (
-  input: CreateArticleInput,
-  authenticate: Context['authenticate'],
-  article: PrismaClient['article']
-) => {
-  const {roles} = authenticate()
-  authorise(CanCreateArticle, roles)
-  const {shared, properties, authorIDs, socialMediaAuthorIDs, ...data} = input
-
-  return article.create({
-    data: {
-      shared,
-      draft: {
-        create: {
-          ...data,
-          properties: {
-            createMany: {
-              data: properties
-            }
-          },
-          authors: {
-            createMany: {
-              data: authorIDs.map(authorId => ({authorId}))
-            }
-          },
-          socialMediaAuthors: {
-            createMany: {
-              data: socialMediaAuthorIDs.map(authorId => ({authorId}))
-            }
-          },
-          revision: 0
-        }
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-}
-
-export const duplicateArticle = async (
-  id: string,
-  authenticate: Context['authenticate'],
-  articles: Context['loaders']['articles'],
-  articleClient: PrismaClient['article']
-): Promise<ArticleWithRevisions> => {
-  const {roles} = authenticate()
-  authorise(CanCreateArticle, roles)
-
-  const article = await articles.load(id)
-  if (!article) {
-    throw new NotFound('article', id)
-  }
-
-  const {
-    id: _id,
-    updatedAt: _updatedAt,
-    createdAt: _createdAt,
-    publishedAt: _publishedAt,
-    slug: _slug,
-    properties,
-    authors,
-    socialMediaAuthors,
-    ...articleRevision
-  } = (article.draft ?? article.pending ?? article.published)!
-
-  const duplicatedProperties = properties.map(property => ({
-    key: property.key,
-    value: property.value,
-    public: property.public
-  }))
-
-  const input: Prisma.ArticleRevisionCreateInput = {
-    ...articleRevision,
-    properties: {
-      createMany: {
-        data: duplicatedProperties
-      }
-    },
-    authors: {
-      createMany: {
-        data: authors.map(({authorId}) => ({authorId}))
-      }
-    },
-    socialMediaAuthors: {
-      createMany: {
-        data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-      }
-    }
-  }
-
-  return articleClient.create({
-    data: {
-      shared: article.shared,
-      draft: {
-        create: input
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-}
-
-export const unpublishArticle = async (
-  id: string,
-  authenticate: Context['authenticate'],
-  articleClient: PrismaClient['article']
-): Promise<ArticleWithRevisions> => {
-  const {roles} = authenticate()
-  authorise(CanPublishArticle, roles)
-
-  const article = await articleClient.findUnique({
-    where: {id},
-    include: {
-      draft: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          },
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          },
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          },
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-
-  if (!article) {
-    throw new NotFound('article', id)
-  }
-
-  const {
-    id: revisionId,
-    properties,
-    authors,
-    socialMediaAuthors,
-    ...revision
-  } = (article.draft ?? article.pending ?? article.published)!
-
-  return articleClient.update({
-    where: {id},
-    data: {
-      draft: {
-        upsert: {
-          create: {
-            ...revision,
-            publishAt: null,
-            publishedAt: null,
-            updatedAt: null,
-            properties: {
-              createMany: {
-                data: properties
-              }
-            },
-            authors: {
-              createMany: {
-                data: authors.map(({authorId}) => ({authorId}))
-              }
-            },
-            socialMediaAuthors: {
-              createMany: {
-                data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-              }
-            }
-          },
-          update: {
-            ...revision,
-            publishAt: null,
-            publishedAt: null,
-            updatedAt: null,
-            properties: {
-              deleteMany: {
-                articleRevisionId: revisionId
-              },
-              createMany: {
-                data: properties
-              }
-            },
-            authors: {
-              deleteMany: {
-                revisionId
-              },
-              createMany: {
-                data: authors.map(({authorId}) => ({authorId}))
-              }
-            },
-            socialMediaAuthors: {
-              deleteMany: {
-                revisionId
-              },
-              createMany: {
-                data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-              }
-            }
-          }
-        }
-      },
-      pending: {
-        delete: Boolean(article.pendingId)
-      },
-      published: {
-        delete: Boolean(article.publishedId)
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-}
-
-export const publishArticle = async (
-  id: string,
-  input: Pick<Prisma.ArticleRevisionCreateInput, 'publishAt' | 'publishedAt' | 'updatedAt'>,
-  authenticate: Context['authenticate'],
-  articleClient: PrismaClient['article']
-): Promise<ArticleWithRevisions | null> => {
-  const {roles} = authenticate()
-  authorise(CanPublishArticle, roles)
-
-  const publishAt = input.publishAt ?? new Date()
-  const publishedAt = input.publishedAt
-  const updatedAt = input.updatedAt
-
-  const article = await articleClient.findUnique({
-    where: {id},
-    include: {
-      draft: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          },
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          },
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          },
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-
-  if (!article) throw new NotFound('article', id)
-  if (!article.draft) return null
-
-  const {id: revisionId, properties, authors, socialMediaAuthors, ...revision} = article.draft
-
-  const publishedArticle = await articleClient.findFirst({
-    where: {
-      OR: [
-        {
-          published: {
-            is: {
-              slug: revision.slug
-            }
-          }
-        },
-        {
-          pending: {
-            is: {
-              slug: revision.slug
-            }
-          }
-        }
-      ]
-    },
-    include: {
-      pending: true,
-      published: true
-    }
-  })
-
-  if (publishedArticle && publishedArticle.id !== id) {
-    throw new DuplicateArticleSlugError(
-      publishedArticle.id,
-      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-      (publishedArticle.published || publishedArticle.pending)!.slug!
-    )
-  }
-
-  if (publishAt > new Date()) {
-    return articleClient.update({
-      where: {id},
-      data: {
-        pending: {
-          upsert: {
-            create: {
-              ...revision,
-              publishAt,
-              publishedAt: publishedAt ?? article?.published?.publishedAt ?? publishAt,
-              updatedAt: updatedAt ?? publishAt,
-              properties: {
-                createMany: {
-                  data: properties
-                }
-              },
-              authors: {
-                createMany: {
-                  data: authors.map(({authorId}) => ({authorId}))
-                }
-              },
-              socialMediaAuthors: {
-                createMany: {
-                  data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-                }
-              }
-            },
-            update: {
-              ...revision,
-              publishAt,
-              publishedAt: publishedAt ?? article?.published?.publishedAt ?? publishAt,
-              updatedAt: updatedAt ?? publishAt,
-              properties: {
-                deleteMany: {
-                  articleRevisionId: revisionId
-                },
-                createMany: {
-                  data: properties
-                }
-              },
-              authors: {
-                deleteMany: {
-                  revisionId
-                },
-                createMany: {
-                  data: authors.map(({authorId}) => ({authorId}))
-                }
-              },
-              socialMediaAuthors: {
-                deleteMany: {
-                  revisionId
-                },
-                createMany: {
-                  data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-                }
-              }
-            }
-          }
-        },
-        draft: {
-          delete: true
-        }
-      },
-      include: {
-        draft: {
-          include: {
-            properties: true,
-            authors: true,
-            socialMediaAuthors: true
-          }
-        },
-        pending: {
-          include: {
-            properties: true,
-            authors: true,
-            socialMediaAuthors: true
-          }
-        },
-        published: {
-          include: {
-            properties: true,
-            authors: true,
-            socialMediaAuthors: true
-          }
-        }
-      }
-    })
-  }
-
-  return articleClient.update({
-    where: {id},
-    data: {
-      published: {
-        upsert: {
-          create: {
-            ...revision,
-            publishedAt: publishedAt ?? article.published?.publishAt ?? publishAt,
-            updatedAt: updatedAt ?? publishAt,
-            publishAt: null,
-            properties: {
-              createMany: {
-                data: properties
-              }
-            },
-            authors: {
-              createMany: {
-                data: authors.map(({authorId}) => ({authorId}))
-              }
-            },
-            socialMediaAuthors: {
-              createMany: {
-                data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-              }
-            }
-          },
-          update: {
-            ...revision,
-            publishedAt: publishedAt ?? article.published?.publishAt ?? publishAt,
-            updatedAt: updatedAt ?? publishAt,
-            publishAt: null,
-            properties: {
-              deleteMany: {
-                articleRevisionId: revisionId
-              },
-              createMany: {
-                data: properties
-              }
-            },
-            authors: {
-              deleteMany: {
-                revisionId
-              },
-              createMany: {
-                data: authors.map(({authorId}) => ({authorId}))
-              }
-            },
-            socialMediaAuthors: {
-              deleteMany: {
-                revisionId
-              },
-              createMany: {
-                data: socialMediaAuthors.map(({authorId}) => ({authorId}))
-              }
-            }
-          }
-        }
-      },
-      pending: {
-        delete: Boolean(article.pendingId)
-      },
-      draft: {
-        delete: true
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-}
-
-type UpdateArticleInput = Pick<Prisma.ArticleCreateInput, 'shared'> &
-  Omit<Prisma.ArticleRevisionCreateInput, 'revision' | 'properties'> & {
-    properties: Prisma.MetadataPropertyUncheckedCreateWithoutArticleRevisionInput[]
-    authorIDs: Prisma.ArticleRevisionAuthorCreateManyRevisionInput['authorId'][]
-    socialMediaAuthorIDs: Prisma.ArticleRevisionSocialMediaAuthorCreateManyRevisionInput['authorId'][]
-  }
-
-export const updateArticle = async (
-  id: string,
-  {properties, authorIDs, socialMediaAuthorIDs, shared, ...input}: UpdateArticleInput,
-  authenticate: Context['authenticate'],
-  articleClient: PrismaClient['article']
-) => {
-  const {roles} = authenticate()
-  authorise(CanCreateArticle, roles)
-
-  const article = await articleClient.findUnique({
-    where: {id},
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-
-  if (!article) {
-    throw new NotFound('article', id)
-  }
-
-  return articleClient.update({
-    where: {id},
-    data: {
-      shared,
-      draft: {
-        upsert: {
-          update: {
-            ...input,
-            revision: article.pending
-              ? article.pending.revision + 1
-              : article.published
-              ? article.published.revision + 1
-              : 0,
-            updatedAt: null,
-            createdAt: article.draft?.createdAt ?? new Date(),
-            properties: {
-              deleteMany: {
-                articleRevisionId: article.draft?.id ?? ''
-              },
-              createMany: {
-                data: properties.map(property => ({
-                  key: property.key,
-                  value: property.value,
-                  public: property.public
-                }))
-              }
-            },
-            authors: {
-              deleteMany: {
-                revisionId: article.draft?.id ?? ''
-              },
-              createMany: {
-                data: authorIDs.map(authorId => ({authorId}))
-              }
-            },
-            socialMediaAuthors: {
-              deleteMany: {
-                revisionId: article.draft?.id ?? ''
-              },
-              createMany: {
-                data: socialMediaAuthorIDs.map(authorId => ({authorId}))
-              }
-            }
-          },
-          create: {
-            ...input,
-            revision: article.pending
-              ? article.pending.revision + 1
-              : article.published
-              ? article.published.revision + 1
-              : 0,
-            updatedAt: null,
-            createdAt: article.draft?.createdAt ?? new Date(),
-            properties: {
-              createMany: {
-                data: properties.map(property => ({
-                  key: property.key,
-                  value: property.value,
-                  public: property.public
-                }))
-              }
-            },
-            authors: {
-              createMany: {
-                data: authorIDs.map(authorId => ({authorId}))
-              }
-            },
-            socialMediaAuthors: {
-              createMany: {
-                data: socialMediaAuthorIDs.map(authorId => ({authorId}))
-              }
-            }
-          }
-        }
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      },
-      published: {
-        include: {
-          properties: true,
-          authors: true,
-          socialMediaAuthors: true
-        }
-      }
-    }
-  })
-}
diff --git a/libs/api/src/lib/graphql/mutation.private.ts b/libs/api/src/lib/graphql/mutation.private.ts
index 0a6e7907..df3ff32e 100644
--- a/libs/api/src/lib/graphql/mutation.private.ts
+++ b/libs/api/src/lib/graphql/mutation.private.ts
@@ -16,14 +16,6 @@ import {NotFound} from '../error'
 import {SendMailType} from '../mails/mailContext'
 import {Validator} from '../validator'
 import {GraphQLArticle, GraphQLArticleInput} from './article'
-import {
-  createArticle,
-  deleteArticleById,
-  duplicateArticle,
-  publishArticle,
-  unpublishArticle,
-  updateArticle
-} from './article/article.private-mutation'
 import {GraphQLAuthor, GraphQLAuthorInput} from './author'
 import {createAuthor, deleteAuthorById, updateAuthor} from './author/author.private-mutation'
 import {GraphQLBlockInput, GraphQLTeaserInput} from './blocks'
@@ -69,14 +61,6 @@ import {
   updateNavigation
 } from './navigation/navigation.private-mutation'
 import {GraphQLPage, GraphQLPageInput} from './page'
-import {
-  createPage,
-  deletePageById,
-  duplicatePage,
-  publishPage,
-  unpublishPage,
-  updatePage
-} from './page/page.private-mutation'
 import {GraphQLPayment, GraphQLPaymentFromInvoiceInput} from './payment'
 import {
   createPaymentMethod,
@@ -660,118 +644,6 @@ export const GraphQLAdminMutation = new GraphQLObjectType<undefined, Context>({
         deleteImageById(id, authenticate, image, mediaAdapter)
     },
 
-    // Article
-    // =======
-
-    createArticle: {
-      type: GraphQLNonNull(GraphQLArticle),
-      args: {input: {type: GraphQLNonNull(GraphQLArticleInput)}},
-      resolve: (root, {input}, {authenticate, prisma: {article}}) =>
-        createArticle({...input, blocks: input.blocks.map(mapBlockUnionMap)}, authenticate, article)
-    },
-
-    updateArticle: {
-      type: GraphQLArticle,
-      args: {
-        id: {type: GraphQLNonNull(GraphQLID)},
-        input: {type: GraphQLNonNull(GraphQLArticleInput)}
-      },
-      resolve: (root, {id, input}, {authenticate, prisma: {article}}) =>
-        updateArticle(
-          id,
-          {...input, blocks: input.blocks.map(mapBlockUnionMap)},
-          authenticate,
-          article
-        )
-    },
-
-    deleteArticle: {
-      type: GraphQLArticle,
-      args: {id: {type: GraphQLNonNull(GraphQLID)}},
-      resolve: (root, {id}, {authenticate, prisma}) => deleteArticleById(id, authenticate, prisma)
-    },
-
-    publishArticle: {
-      type: GraphQLArticle,
-      args: {
-        id: {type: GraphQLNonNull(GraphQLID)},
-        publishAt: {type: GraphQLDateTime},
-        updatedAt: {type: GraphQLDateTime},
-        publishedAt: {type: GraphQLDateTime}
-      },
-      resolve: (root, {id, publishAt, updatedAt, publishedAt}, {authenticate, prisma: {article}}) =>
-        publishArticle(id, {publishAt, updatedAt, publishedAt}, authenticate, article)
-    },
-
-    unpublishArticle: {
-      type: GraphQLArticle,
-      args: {id: {type: GraphQLNonNull(GraphQLID)}},
-      resolve: (root, {id}, {authenticate, prisma: {article}}) =>
-        unpublishArticle(id, authenticate, article)
-    },
-
-    duplicateArticle: {
-      type: GraphQLNonNull(GraphQLArticle),
-      args: {
-        id: {type: GraphQLNonNull(GraphQLID)}
-      },
-      resolve: (root, {id}, {authenticate, prisma: {article}, loaders: {articles}}) =>
-        duplicateArticle(id, authenticate, articles, article)
-    },
-
-    // Page
-    // =======
-
-    createPage: {
-      type: GraphQLNonNull(GraphQLPage),
-      args: {input: {type: GraphQLNonNull(GraphQLPageInput)}},
-      resolve: (root, {input}, {authenticate, prisma: {page}}) =>
-        createPage({...input, blocks: input.blocks.map(mapBlockUnionMap)}, authenticate, page)
-    },
-
-    updatePage: {
-      type: GraphQLPage,
-      args: {
-        id: {type: GraphQLNonNull(GraphQLID)},
-        input: {type: GraphQLNonNull(GraphQLPageInput)}
-      },
-      resolve: (root, {id, input}, {authenticate, prisma: {page}}) =>
-        updatePage(id, {...input, blocks: input.blocks.map(mapBlockUnionMap)}, authenticate, page)
-    },
-
-    deletePage: {
-      type: GraphQLPage,
-      args: {id: {type: GraphQLNonNull(GraphQLID)}},
-      resolve: (root, {id}, {authenticate, prisma}) => deletePageById(id, authenticate, prisma)
-    },
-
-    publishPage: {
-      type: GraphQLPage,
-      args: {
-        id: {type: GraphQLNonNull(GraphQLID)},
-        publishAt: {type: GraphQLDateTime},
-        updatedAt: {type: GraphQLDateTime},
-        publishedAt: {type: GraphQLDateTime}
-      },
-      resolve: (root, {id, publishAt, updatedAt, publishedAt}, {authenticate, prisma: {page}}) =>
-        publishPage(id, {publishAt, updatedAt, publishedAt}, authenticate, page)
-    },
-
-    unpublishPage: {
-      type: GraphQLPage,
-      args: {id: {type: GraphQLNonNull(GraphQLID)}},
-      resolve: (root, {id}, {authenticate, prisma: {page}}) => unpublishPage(id, authenticate, page)
-    },
-
-    duplicatePage: {
-      type: GraphQLNonNull(GraphQLPage),
-      args: {
-        id: {type: GraphQLNonNull(GraphQLID)}
-      },
-      resolve: (root, {id}, {prisma: {page}, loaders: {pages}, authenticate}) =>
-        duplicatePage(id, authenticate, pages, page)
-    },
-
     // MemberPlan
     // ======
 
diff --git a/libs/api/src/lib/graphql/page/page.private-mutation.ts b/libs/api/src/lib/graphql/page/page.private-mutation.ts
deleted file mode 100644
index 8d21a995..00000000
--- a/libs/api/src/lib/graphql/page/page.private-mutation.ts
+++ /dev/null
@@ -1,593 +0,0 @@
-import {Page, Prisma, PrismaClient} from '@prisma/client'
-import {Context} from '../../context'
-import {PageWithRevisions} from '../../db/page'
-import {DuplicatePageSlugError, NotFound} from '../../error'
-import {authorise, CanCreatePage, CanDeletePage, CanPublishPage} from '../permissions'
-
-export const deletePageById = async (
-  id: string,
-  authenticate: Context['authenticate'],
-  prisma: PrismaClient
-): Promise<Page> => {
-  const {roles} = authenticate()
-  authorise(CanDeletePage, roles)
-
-  const page = await prisma.page.findUnique({
-    where: {
-      id
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-
-  if (!page) {
-    throw new NotFound('page', id)
-  }
-
-  await prisma.$transaction([
-    prisma.page.delete({
-      where: {
-        id
-      }
-    }),
-    prisma.pageRevision.deleteMany({
-      where: {
-        id: {
-          in: [page.draftId, page.pendingId, page.publishedId].filter(Boolean) as string[]
-        }
-      }
-    })
-  ])
-
-  return page
-}
-
-type CreatePageInput = Omit<Prisma.PageRevisionCreateInput, 'properties' | 'revision'> & {
-  properties: Prisma.MetadataPropertyCreateManyPageRevisionInput[]
-}
-
-export const createPage = async (
-  input: CreatePageInput,
-  authenticate: Context['authenticate'],
-  page: PrismaClient['page']
-) => {
-  const {roles} = authenticate()
-  authorise(CanCreatePage, roles)
-  const {properties, ...data} = input
-
-  return page.create({
-    data: {
-      draft: {
-        create: {
-          ...data,
-          properties: {
-            createMany: {
-              data: properties
-            }
-          },
-          revision: 0
-        }
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-}
-
-export const duplicatePage = async (
-  id: string,
-  authenticate: Context['authenticate'],
-  pages: Context['loaders']['pages'],
-  pageClient: PrismaClient['page']
-): Promise<PageWithRevisions> => {
-  const {roles} = authenticate()
-  authorise(CanCreatePage, roles)
-
-  const page = await pages.load(id)
-  if (!page) {
-    throw new NotFound('page', id)
-  }
-
-  const {
-    id: _id,
-    updatedAt: _updatedAt,
-    createdAt: _createdAt,
-    publishedAt: _publishedAt,
-    slug: _slug,
-    properties,
-    ...pageRevision
-  } = (page.draft ?? page.pending ?? page.published)!
-
-  const duplicatedProperties = properties.map(property => ({
-    key: property.key,
-    value: property.value,
-    public: property.public
-  }))
-
-  const input: Prisma.PageRevisionCreateInput = {
-    ...pageRevision,
-    properties: {
-      createMany: {
-        data: duplicatedProperties
-      }
-    }
-  }
-
-  return pageClient.create({
-    data: {
-      draft: {
-        create: input
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-}
-
-export const unpublishPage = async (
-  id: string,
-  authenticate: Context['authenticate'],
-  pageClient: PrismaClient['page']
-): Promise<PageWithRevisions> => {
-  const {roles} = authenticate()
-  authorise(CanPublishPage, roles)
-
-  const page = await pageClient.findUnique({
-    where: {id},
-    include: {
-      draft: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          }
-        }
-      },
-      pending: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          }
-        }
-      },
-      published: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          }
-        }
-      }
-    }
-  })
-
-  if (!page || !(page.pending || page.published)) {
-    throw new NotFound('page', id)
-  }
-
-  const {id: revisionId, properties, ...revision} = (page.draft ?? page.pending ?? page.published)!
-
-  return pageClient.update({
-    where: {id},
-    data: {
-      draft: {
-        upsert: {
-          create: {
-            ...revision,
-            publishAt: null,
-            publishedAt: null,
-            updatedAt: null,
-            properties: {
-              createMany: {
-                data: properties
-              }
-            }
-          },
-          update: {
-            ...revision,
-            publishAt: null,
-            publishedAt: null,
-            updatedAt: null,
-            properties: {
-              deleteMany: {
-                pageRevisionId: revisionId
-              },
-              createMany: {
-                data: properties
-              }
-            }
-          }
-        }
-      },
-      pending: {
-        delete: Boolean(page.pendingId)
-      },
-      published: {
-        delete: Boolean(page.publishedId)
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-}
-
-export const publishPage = async (
-  id: string,
-  input: Pick<Prisma.PageRevisionCreateInput, 'publishAt' | 'publishedAt' | 'updatedAt'>,
-  authenticate: Context['authenticate'],
-  pageClient: PrismaClient['page']
-): Promise<PageWithRevisions | null> => {
-  const {roles} = authenticate()
-  authorise(CanPublishPage, roles)
-
-  const publishAt = input.publishAt ?? new Date()
-  const publishedAt = input.publishedAt
-  const updatedAt = input.updatedAt
-
-  const page = await pageClient.findUnique({
-    where: {id},
-    include: {
-      draft: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          }
-        }
-      },
-      pending: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          }
-        }
-      },
-      published: {
-        include: {
-          properties: {
-            select: {
-              key: true,
-              value: true,
-              public: true
-            }
-          }
-        }
-      }
-    }
-  })
-
-  if (!page) throw new NotFound('page', id)
-  if (!page.draft) return null
-
-  const {id: revisionId, properties, ...revision} = page.draft
-
-  const publishedPage = await pageClient.findFirst({
-    where: {
-      OR: [
-        {
-          published: {
-            is: {
-              slug: revision.slug
-            }
-          }
-        },
-        {
-          pending: {
-            is: {
-              slug: revision.slug
-            }
-          }
-        }
-      ]
-    },
-    include: {
-      draft: true,
-      pending: true,
-      published: true
-    }
-  })
-
-  if (publishedPage && publishedPage.id !== id) {
-    throw new DuplicatePageSlugError(
-      publishedPage.id,
-      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-      (publishedPage.published || publishedPage.pending)!.slug!
-    )
-  }
-
-  if (publishAt > new Date()) {
-    return pageClient.update({
-      where: {id},
-      data: {
-        pending: {
-          upsert: {
-            create: {
-              ...revision,
-              publishAt,
-              publishedAt: publishedAt ?? page?.published?.publishedAt ?? publishAt,
-              updatedAt: updatedAt ?? publishAt,
-              properties: {
-                createMany: {
-                  data: properties
-                }
-              }
-            },
-            update: {
-              ...revision,
-              publishAt,
-              publishedAt: publishedAt ?? page?.published?.publishedAt ?? publishAt,
-              updatedAt: updatedAt ?? publishAt,
-              properties: {
-                deleteMany: {
-                  pageRevisionId: revisionId
-                },
-                createMany: {
-                  data: properties
-                }
-              }
-            }
-          }
-        },
-        draft: {
-          delete: true
-        }
-      },
-      include: {
-        draft: {
-          include: {
-            properties: true
-          }
-        },
-        pending: {
-          include: {
-            properties: true
-          }
-        },
-        published: {
-          include: {
-            properties: true
-          }
-        }
-      }
-    })
-  }
-
-  return pageClient.update({
-    where: {id},
-    data: {
-      published: {
-        upsert: {
-          create: {
-            ...revision,
-            publishedAt: publishedAt ?? page.published?.publishAt ?? publishAt,
-            updatedAt: updatedAt ?? publishAt,
-            publishAt: null,
-            properties: {
-              createMany: {
-                data: properties
-              }
-            }
-          },
-          update: {
-            ...revision,
-            publishedAt: publishedAt ?? page.published?.publishAt ?? publishAt,
-            updatedAt: updatedAt ?? publishAt,
-            publishAt: null,
-            properties: {
-              createMany: {
-                data: properties
-              }
-            }
-          }
-        }
-      },
-      pending: {
-        delete: Boolean(page.pendingId)
-      },
-      draft: {
-        delete: true
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-}
-
-type UpdatePageInput = Omit<Prisma.PageRevisionCreateInput, 'revision' | 'properties'> & {
-  properties: Prisma.MetadataPropertyUncheckedCreateWithoutPageRevisionInput[]
-}
-
-export const updatePage = async (
-  id: string,
-  {properties, ...input}: UpdatePageInput,
-  authenticate: Context['authenticate'],
-  pageClient: PrismaClient['page']
-) => {
-  const {roles} = authenticate()
-  authorise(CanCreatePage, roles)
-
-  const page = await pageClient.findUnique({
-    where: {id},
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-
-  if (!page) {
-    throw new NotFound('page', id)
-  }
-
-  return pageClient.update({
-    where: {id},
-    data: {
-      draft: {
-        upsert: {
-          update: {
-            ...input,
-            revision: page.pending
-              ? page.pending.revision + 1
-              : page.published
-              ? page.published.revision + 1
-              : 0,
-            updatedAt: null,
-            createdAt: page.draft?.createdAt ?? new Date(),
-            properties: {
-              deleteMany: {
-                pageRevisionId: page.draft?.id ?? ''
-              },
-              createMany: {
-                data: properties.map(property => ({
-                  key: property.key,
-                  value: property.value,
-                  public: property.public
-                }))
-              }
-            }
-          },
-          create: {
-            ...input,
-            revision: page.pending
-              ? page.pending.revision + 1
-              : page.published
-              ? page.published.revision + 1
-              : 0,
-            updatedAt: null,
-            createdAt: page.draft?.createdAt ?? new Date(),
-            properties: {
-              createMany: {
-                data: properties.map(property => ({
-                  key: property.key,
-                  value: property.value,
-                  public: property.public
-                }))
-              }
-            }
-          }
-        }
-      }
-    },
-    include: {
-      draft: {
-        include: {
-          properties: true
-        }
-      },
-      pending: {
-        include: {
-          properties: true
-        }
-      },
-      published: {
-        include: {
-          properties: true
-        }
-      }
-    }
-  })
-}
diff --git a/libs/api/src/lib/graphql/phrase/phrase.public-queries.ts b/libs/api/src/lib/graphql/phrase/phrase.public-queries.ts
deleted file mode 100644
index 5450cb80..00000000
--- a/libs/api/src/lib/graphql/phrase/phrase.public-queries.ts
+++ /dev/null
@@ -1,103 +0,0 @@
-import {PrismaClient} from '@prisma/client'
-import {articleWithRevisionsToPublicArticle} from '../../db/article'
-import {pageWithRevisionsToPublicPage} from '../../db/page'
-import {Context} from '../../context'
-
-export const queryPhrase = async (
-  query: string,
-  prisma: PrismaClient,
-  publicArticlesLoader: Context['loaders']['publicArticles'],
-  publicPagesLoader: Context['loaders']['publicPagesByID']
-) => {
-  const [articleRevisions, pageRevisions] = await Promise.all([
-    prisma.$queryRaw<{id: string}[]>`
-        SELECT id FROM "articles.revisions"
-        WHERE jsonb_to_tsvector(
-            'english',
-            jsonb_path_query_array(blocks, 'strict $.**.text'),
-            '["string"]'
-        )@@ to_tsquery('english', ${query})
-    `,
-    prisma.$queryRaw<{id: string}[]>`
-        SELECT id FROM "pages.revisions"
-        WHERE jsonb_to_tsvector(
-            'english',
-            jsonb_path_query_array(blocks, 'strict $.**.text'),
-            '["string"]'
-        )@@ to_tsquery('english', ${query})
-    `
-  ])
-
-  const articleRevisionIds = articleRevisions.map(({id}) => id)
-  const pageRevisionIds = pageRevisions.map(({id}) => id)
-
-  // If we do not wan't to search for a specific word it should not exist in title and blocks
-  // but if we are looking for a word it should be in either the title or blocks
-  const comparator = query.includes('!') ? 'AND' : 'OR'
-
-  const [articles, pages] = await Promise.all([
-    prisma.article.findMany({
-      where: {
-        [comparator]: [
-          {
-            publishedId: {
-              in: articleRevisionIds
-            }
-          },
-          {
-            published: {
-              title: {
-                search: query
-              }
-            }
-          }
-        ]
-      },
-      include: {
-        published: {
-          include: {
-            properties: true,
-            authors: true,
-            socialMediaAuthors: true
-          }
-        }
-      }
-    }),
-    prisma.page.findMany({
-      where: {
-        [comparator]: [
-          {
-            publishedId: {
-              in: pageRevisionIds
-            }
-          },
-          {
-            published: {
-              title: {
-                search: query
-              }
-            }
-          }
-        ]
-      },
-      include: {
-        published: {
-          include: {
-            properties: true
-          }
-        }
-      }
-    })
-  ])
-
-  const publicArticles = articles.map(articleWithRevisionsToPublicArticle)
-  publicArticles.forEach(article => publicArticlesLoader.prime(article.id, article))
-
-  const publicPages = pages.map(pageWithRevisionsToPublicPage)
-  publicPages.forEach(page => publicPagesLoader.prime(page.id, page))
-
-  return {
-    articles: publicArticles,
-    pages: publicPages
-  }
-}
diff --git a/libs/api/src/lib/graphql/phrase/phrase.ts b/libs/api/src/lib/graphql/phrase/phrase.ts
deleted file mode 100644
index 6eb5ebb6..00000000
--- a/libs/api/src/lib/graphql/phrase/phrase.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import {GraphQLObjectType, GraphQLNonNull, GraphQLList} from 'graphql'
-import {Context} from '../../context'
-import {GraphQLPublicArticle} from '../article'
-import {PublicArticle} from '../../db/article'
-import {PublicPage} from '../../db/page'
-import {GraphQLPublicPage} from '../page'
-
-export const GraphQLPublicPhrase = new GraphQLObjectType<
-  {
-    articles: PublicArticle[]
-    pages: PublicPage[]
-  },
-  Context
->({
-  name: 'Phrase',
-  fields: {
-    articles: {type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLPublicArticle)))},
-    pages: {type: GraphQLNonNull(GraphQLList(GraphQLNonNull(GraphQLPublicPage)))}
-  }
-})
diff --git a/libs/api/src/lib/graphql/query.public.ts b/libs/api/src/lib/graphql/query.public.ts
index e21bf1fc..1e095a25 100644
--- a/libs/api/src/lib/graphql/query.public.ts
+++ b/libs/api/src/lib/graphql/query.public.ts
@@ -63,8 +63,6 @@ import {GraphQLPublicSubscription} from './subscription'
 import {GraphQLPublicUser} from './user'
 import {GraphQLPublicComment, GraphQLPublicCommentSort} from './comment/comment'
 import {getPublicCommentsForItemById} from './comment/comment.public-queries'
-import {queryPhrase} from './phrase/phrase.public-queries'
-import {GraphQLPublicPhrase} from './phrase/phrase'
 import {EventSort, getEvent, getEvents} from './event/event.queries'
 import {
   GraphQLEvent,
@@ -555,20 +553,6 @@ export const GraphQLPublicQuery = new GraphQLObjectType<undefined, Context>({
         id: {type: GraphQLNonNull(GraphQLID)}
       },
       resolve: (root, {id}, {prisma: {event}}) => getEvent(id, event)
-    },
-
-    // Phrase
-    // =======
-
-    phrase: {
-      type: GraphQLPublicPhrase,
-      description:
-        'This query performs a fulltext search on titles and blocks of articles/pages and returns all matching ones.',
-      args: {
-        query: {type: GraphQLNonNull(GraphQLString)}
-      },
-      resolve: (root, {query}, {prisma, loaders}) =>
-        queryPhrase(query, prisma, loaders.publicArticles, loaders.publicPagesByID)
     }
   }
 })
diff --git a/libs/editor/api-v2/src/lib/graphql.ts b/libs/editor/api-v2/src/lib/graphql.ts
index 6a59e2e5..08336479 100644
--- a/libs/editor/api-v2/src/lib/graphql.ts
+++ b/libs/editor/api-v2/src/lib/graphql.ts
@@ -75,8 +75,10 @@ export type MemberPlanRefInput = {
 
 export type Mutation = {
   __typename?: 'Mutation';
-  createSubscriptionFlow: SubscriptionFlowModel;
+  createSubscriptionFlow: Array<SubscriptionFlowModel>;
+  deleteSubscriptionFlow: Array<SubscriptionFlowModel>;
   syncTemplates: Scalars['Boolean'];
+  updateSubscriptionFlow: Array<SubscriptionFlowModel>;
 };
 
 
@@ -84,6 +86,16 @@ export type MutationCreateSubscriptionFlowArgs = {
   subscriptionFlow: SubscriptionFlowModelCreateInput;
 };
 
+
+export type MutationDeleteSubscriptionFlowArgs = {
+  subscriptionFlowId: Scalars['Float'];
+};
+
+
+export type MutationUpdateSubscriptionFlowArgs = {
+  subscriptionFlow: SubscriptionFlowModelUpdateInput;
+};
+
 export type PaymentMethodRef = {
   __typename?: 'PaymentMethodRef';
   id: Scalars['String'];
@@ -196,11 +208,11 @@ export type SubscriptionFlowModel = {
 };
 
 export type SubscriptionFlowModelCreateInput = {
-  additionalIntervals: Array<SubscriptionIntervalInput>;
+  additionalIntervals: Array<SubscriptionIntervalCreateInput>;
   autoRenewal: Array<Scalars['Boolean']>;
   deactivationByUserMailTemplate?: InputMaybe<MailTemplateRefInput>;
-  deactivationUnpaidMailTemplate?: InputMaybe<SubscriptionIntervalInput>;
-  invoiceCreationMailTemplate?: InputMaybe<SubscriptionIntervalInput>;
+  deactivationUnpaidMailTemplate?: InputMaybe<SubscriptionIntervalCreateInput>;
+  invoiceCreationMailTemplate?: InputMaybe<SubscriptionIntervalCreateInput>;
   memberPlan?: InputMaybe<MemberPlanRefInput>;
   paymentMethods: Array<PaymentMethodRefInput>;
   periodicities: Array<PaymentPeriodicity>;
@@ -210,17 +222,36 @@ export type SubscriptionFlowModelCreateInput = {
   subscribeMailTemplate?: InputMaybe<MailTemplateRefInput>;
 };
 
+export type SubscriptionFlowModelUpdateInput = {
+  additionalIntervals: Array<SubscriptionIntervalUpdateInput>;
+  autoRenewal: Array<Scalars['Boolean']>;
+  deactivationByUserMailTemplate?: InputMaybe<MailTemplateRefInput>;
+  deactivationUnpaidMailTemplate?: InputMaybe<SubscriptionIntervalUpdateInput>;
+  id: Scalars['Float'];
+  invoiceCreationMailTemplate?: InputMaybe<SubscriptionIntervalUpdateInput>;
+  paymentMethods: Array<PaymentMethodRefInput>;
+  periodicities: Array<PaymentPeriodicity>;
+  reactivationMailTemplate?: InputMaybe<MailTemplateRefInput>;
+  renewalFailedMailTemplate?: InputMaybe<MailTemplateRefInput>;
+  renewalSuccessMailTemplate?: InputMaybe<MailTemplateRefInput>;
+  subscribeMailTemplate?: InputMaybe<MailTemplateRefInput>;
+};
+
 export type SubscriptionInterval = {
   __typename?: 'SubscriptionInterval';
   daysAwayFromEnding: Scalars['Float'];
   id: Scalars['Float'];
   mailTemplate: MailTemplateRef;
+};
+
+export type SubscriptionIntervalCreateInput = {
+  daysAwayFromEnding: Scalars['Float'];
   mailTemplateId: Scalars['Float'];
 };
 
-export type SubscriptionIntervalInput = {
+export type SubscriptionIntervalUpdateInput = {
   daysAwayFromEnding: Scalars['Float'];
-  id: Scalars['Float'];
+  id?: InputMaybe<Scalars['Float']>;
   mailTemplateId: Scalars['Float'];
 };
 
diff --git a/libs/membership/api/setup-database.js b/libs/membership/api/setup-database.js
index 83a628c5..4022ccec 100644
--- a/libs/membership/api/setup-database.js
+++ b/libs/membership/api/setup-database.js
@@ -5,5 +5,5 @@ export default async () => {
   const databaseUrl = `postgresql://postgres@localhost:5432/${name}?schema=public`
   process.env.DATABASE_URL = databaseUrl
 
-  await execa(`npx`, ['prisma', 'migrate', 'deploy'])
+  await execa(`npx`, ['prisma', 'db', 'push', '--force-reset'])
 }
diff --git a/libs/membership/api/src/lib/dashboard/subscriptions/__snapshots__/dashboard-subscription.resolver.spec.ts.snap b/libs/membership/api/src/lib/dashboard/subscriptions/__snapshots__/dashboard-subscription.resolver.spec.ts.snap
deleted file mode 100644
index 2f08cbd2..00000000
--- a/libs/membership/api/src/lib/dashboard/subscriptions/__snapshots__/dashboard-subscription.resolver.spec.ts.snap
+++ /dev/null
@@ -1,82 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`DashboardSubscriptionResolver activeSubscribers 1`] = `
-Array [
-  Object {
-    "endsAt": null,
-    "memberPlan": "foo",
-    "monthlyAmount": 500,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": null,
-    "renewsAt": null,
-    "startsAt": "2023-02-03T00:00:00.000Z",
-  },
-  Object {
-    "endsAt": "2023-02-03T00:00:00.000Z",
-    "memberPlan": "Bar",
-    "monthlyAmount": 50,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": "invoiceNotPaid",
-    "renewsAt": null,
-    "startsAt": "2023-02-02T00:00:00.000Z",
-  },
-  Object {
-    "endsAt": "2023-02-01T00:00:00.000Z",
-    "memberPlan": "foo",
-    "monthlyAmount": 50,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": null,
-    "renewsAt": "2023-02-01T00:00:00.000Z",
-    "startsAt": "2023-01-01T00:00:00.000Z",
-  },
-]
-`;
-
-exports[`DashboardSubscriptionResolver newDeactivations 1`] = `
-Array [
-  Object {
-    "endsAt": "2023-02-03T00:00:00.000Z",
-    "memberPlan": "foo",
-    "monthlyAmount": 50,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": "invoiceNotPaid",
-    "startsAt": "2023-01-01T00:00:00.000Z",
-  },
-]
-`;
-
-exports[`DashboardSubscriptionResolver newSubscribers 1`] = `
-Array [
-  Object {
-    "endsAt": "2023-02-02T00:00:00.000Z",
-    "memberPlan": "Bar",
-    "monthlyAmount": 50,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": "invoiceNotPaid",
-    "renewsAt": null,
-    "startsAt": "2023-01-02T00:00:00.000Z",
-  },
-  Object {
-    "endsAt": "2023-02-01T00:00:00.000Z",
-    "memberPlan": "foo",
-    "monthlyAmount": 50,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": null,
-    "renewsAt": "2023-02-01T00:00:00.000Z",
-    "startsAt": "2023-01-01T00:00:00.000Z",
-  },
-]
-`;
-
-exports[`DashboardSubscriptionResolver renewingSubscribers 1`] = `
-Array [
-  Object {
-    "memberPlan": "foo",
-    "monthlyAmount": 50,
-    "paymentPeriodicity": "monthly",
-    "reasonForDeactivation": null,
-    "renewsAt": "2023-01-29T00:00:00.000Z",
-    "startsAt": "2023-01-01T00:00:00.000Z",
-  },
-]
-`;
diff --git a/libs/membership/api/src/lib/dashboard/subscriptions/dashboard-subscription.resolver.spec.ts b/libs/membership/api/src/lib/dashboard/subscriptions/dashboard-subscription.resolver.spec.ts
deleted file mode 100644
index 54c0bd6f..00000000
--- a/libs/membership/api/src/lib/dashboard/subscriptions/dashboard-subscription.resolver.spec.ts
+++ /dev/null
@@ -1,565 +0,0 @@
-import {Test, TestingModule} from '@nestjs/testing'
-import {INestApplication, Module} from '@nestjs/common'
-import request from 'supertest'
-import {GraphQLModule} from '@nestjs/graphql'
-import {ApolloDriverConfig, ApolloDriver} from '@nestjs/apollo'
-import {PrismaClient, Prisma} from '@prisma/client'
-import {PrismaModule} from '@wepublish/nest-modules'
-import {DashboardSubscriptionResolver} from './dashboard-subscription.resolver'
-import {DashboardSubscriptionService} from './dashboard-subscription.service'
-
-@Module({
-  imports: [
-    GraphQLModule.forRoot<ApolloDriverConfig>({
-      driver: ApolloDriver,
-      autoSchemaFile: true,
-      path: '/'
-    }),
-    PrismaModule
-  ],
-  providers: [DashboardSubscriptionResolver, DashboardSubscriptionService]
-})
-export class AppModule {}
-
-const newSubscribersQuery = `
-  query Dashboard($end:DateTime!, $start:DateTime!) {
-    newSubscribers(start:$start, end:$end) {
-      endsAt
-      memberPlan
-      monthlyAmount
-      renewsAt
-      startsAt
-      paymentPeriodicity
-      reasonForDeactivation
-    }
-  }
-`
-
-const activeSubscribersQuery = `
-  query Dashboard {
-    activeSubscribers {
-      endsAt
-      memberPlan
-      monthlyAmount
-      renewsAt
-      startsAt
-      paymentPeriodicity
-      reasonForDeactivation
-    }
-  }
-`
-
-const renewingSubscribersQuery = `
-  query Dashboard($end:DateTime!, $start:DateTime!) {
-    renewingSubscribers(start:$start, end:$end) {
-      memberPlan
-      monthlyAmount
-      renewsAt
-      startsAt
-      paymentPeriodicity
-      reasonForDeactivation
-    }
-  }
-`
-
-const newDeactivationsQuery = `
-  query Dashboard($end:DateTime!, $start:DateTime!) {
-    newDeactivations(start:$start, end:$end) {
-      endsAt
-      memberPlan
-      monthlyAmount
-      startsAt
-      paymentPeriodicity
-      reasonForDeactivation
-    }
-  }
-`
-
-describe('DashboardSubscriptionResolver', () => {
-  let app: INestApplication
-  let prisma: PrismaClient
-
-  beforeEach(async () => {
-    const module: TestingModule = await Test.createTestingModule({
-      imports: [AppModule]
-    }).compile()
-
-    prisma = module.get<PrismaClient>(PrismaClient)
-    app = module.createNestApplication()
-    await app.init()
-  })
-
-  beforeEach(async () => {
-    await prisma.subscription.deleteMany({})
-  })
-
-  afterAll(async () => {
-    await app.close()
-  })
-
-  test('newSubscribers', async () => {
-    const paymentMethod = {
-      active: true,
-      description: '',
-      name: '',
-      paymentProviderID: '',
-      slug: ''
-    }
-
-    const mockData: Prisma.SubscriptionCreateInput[] = [
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-02-01'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'foo'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Foo',
-              slug: 'foo'
-            }
-          }
-        },
-        user: {
-          connectOrCreate: {
-            where: {email: 'foo@wepublish.ch'},
-            create: {
-              active: true,
-              email: 'foo@wepublish.ch',
-              name: 'Foo',
-              password: ''
-            }
-          }
-        }
-      },
-      {
-        autoRenew: false,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-02'),
-        paidUntil: new Date('2023-02-01'),
-        deactivation: {
-          create: {
-            date: new Date('2023-02-02'),
-            reason: 'invoiceNotPaid'
-          }
-        },
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'bar'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Bar',
-              slug: 'bar'
-            }
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      },
-      {
-        autoRenew: false,
-        monthlyAmount: 500,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-02-01'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connect: {
-            slug: 'foo'
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      }
-    ]
-
-    await Promise.all(mockData.map(data => prisma.subscription.create({data})))
-
-    await request(app.getHttpServer())
-      .post('')
-      .send({
-        query: newSubscribersQuery,
-        variables: {
-          start: new Date('2023-01-01').toISOString(),
-          end: new Date('2023-02-01').toISOString()
-        }
-      })
-      .expect(200)
-      .expect(res => {
-        expect(res.body.data.newSubscribers).toMatchSnapshot()
-      })
-  })
-
-  test('activeSubscribers', async () => {
-    const paymentMethod = {
-      active: true,
-      description: '',
-      name: '',
-      paymentProviderID: '',
-      slug: ''
-    }
-
-    const mockData: Prisma.SubscriptionCreateInput[] = [
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-02-01'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'foo'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Foo',
-              slug: 'foo'
-            }
-          }
-        },
-        user: {
-          connectOrCreate: {
-            where: {email: 'foo@wepublish.ch'},
-            create: {
-              active: true,
-              email: 'foo@wepublish.ch',
-              name: 'Foo',
-              password: ''
-            }
-          }
-        }
-      },
-      {
-        autoRenew: false,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-02-02'),
-        paidUntil: new Date('2023-02-02'),
-        deactivation: {
-          create: {
-            date: new Date('2023-02-03'),
-            reason: 'invoiceNotPaid'
-          }
-        },
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'bar'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Bar',
-              slug: 'bar'
-            }
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      },
-      {
-        autoRenew: false,
-        monthlyAmount: 500,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-02-03'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connect: {
-            slug: 'foo'
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      }
-    ]
-
-    await Promise.all(mockData.map(data => prisma.subscription.create({data})))
-
-    await request(app.getHttpServer())
-      .post('')
-      .send({
-        query: activeSubscribersQuery,
-        variables: {
-          start: new Date('2023-01-01').toISOString(),
-          end: new Date('2023-02-01').toISOString()
-        }
-      })
-      .expect(200)
-      .expect(res => {
-        expect(res.body.data.activeSubscribers).toMatchSnapshot()
-      })
-  })
-
-  test('renewingSubscribers', async () => {
-    const paymentMethod = {
-      active: true,
-      description: '',
-      name: '',
-      paymentProviderID: '',
-      slug: ''
-    }
-
-    const mockData: Prisma.SubscriptionCreateInput[] = [
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-01-29'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'foo'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Foo',
-              slug: 'foo'
-            }
-          }
-        },
-        user: {
-          connectOrCreate: {
-            where: {email: 'foo@wepublish.ch'},
-            create: {
-              active: true,
-              email: 'foo@wepublish.ch',
-              name: 'Foo',
-              password: ''
-            }
-          }
-        }
-      },
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-02-01'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connect: {
-            slug: 'foo'
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      },
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-01-02'),
-        deactivation: {
-          create: {
-            date: new Date('2023-02-03'),
-            reason: 'invoiceNotPaid'
-          }
-        },
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'bar'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Bar',
-              slug: 'bar'
-            }
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      },
-      {
-        autoRenew: false,
-        monthlyAmount: 500,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-01-28'),
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connect: {
-            slug: 'foo'
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      }
-    ]
-
-    await Promise.all(mockData.map(data => prisma.subscription.create({data})))
-
-    await request(app.getHttpServer())
-      .post('')
-      .send({
-        query: renewingSubscribersQuery,
-        variables: {
-          start: new Date('2023-01-01').toISOString(),
-          end: new Date('2023-02-01').toISOString()
-        }
-      })
-      .expect(200)
-      .expect(res => {
-        expect(res.body.data.renewingSubscribers).toMatchSnapshot()
-      })
-  })
-
-  test('newDeactivations', async () => {
-    const paymentMethod = {
-      active: true,
-      description: '',
-      name: '',
-      paymentProviderID: '',
-      slug: ''
-    }
-
-    const mockData: Prisma.SubscriptionCreateInput[] = [
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-02-01'),
-        deactivation: {
-          create: {
-            createdAt: new Date('2023-01-01'),
-            date: new Date('2023-02-03'),
-            reason: 'invoiceNotPaid'
-          }
-        },
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connectOrCreate: {
-            where: {
-              slug: 'foo'
-            },
-            create: {
-              active: true,
-              amountPerMonthMin: 10,
-              name: 'Foo',
-              slug: 'foo'
-            }
-          }
-        },
-        user: {
-          connectOrCreate: {
-            where: {email: 'foo@wepublish.ch'},
-            create: {
-              active: true,
-              email: 'foo@wepublish.ch',
-              name: 'Foo',
-              password: ''
-            }
-          }
-        }
-      },
-      {
-        autoRenew: true,
-        monthlyAmount: 50,
-        paymentPeriodicity: 'monthly',
-        startsAt: new Date('2023-01-01'),
-        paidUntil: new Date('2023-02-01'),
-        deactivation: {
-          create: {
-            createdAt: new Date('2023-02-01'),
-            date: new Date('2023-02-03'),
-            reason: 'invoiceNotPaid'
-          }
-        },
-        paymentMethod: {
-          create: paymentMethod
-        },
-        memberPlan: {
-          connect: {
-            slug: 'foo'
-          }
-        },
-        user: {
-          connect: {
-            email: 'foo@wepublish.ch'
-          }
-        }
-      }
-    ]
-
-    await Promise.all(mockData.map(data => prisma.subscription.create({data})))
-
-    await request(app.getHttpServer())
-      .post('')
-      .send({
-        query: newDeactivationsQuery,
-        variables: {
-          start: new Date('2023-01-01').toISOString(),
-          end: new Date('2023-02-01').toISOString()
-        }
-      })
-      .expect(200)
-      .expect(res => {
-        expect(res.body.data.newDeactivations).toMatchSnapshot()
-      })
-  })
-})
diff --git a/libs/membership/api/src/lib/mail-template/__fixtures__/mailchimp-templates-list-success-response.json b/libs/membership/api/src/lib/mail-template/__fixtures__/mailchimp-templates-list-success-response.json
deleted file mode 100644
index 7286eb52..00000000
--- a/libs/membership/api/src/lib/mail-template/__fixtures__/mailchimp-templates-list-success-response.json
+++ /dev/null
@@ -1,42 +0,0 @@
-[
-  {
-    "slug": "subscription-creation",
-    "name": "Subscription Creation",
-    "code": "<html></html>",
-    "publish_code": "<html></html>",
-    "published_at": "2023-01-26 10:56:35",
-    "created_at": "2023-01-26 10:54:49.85543",
-    "updated_at": "2023-01-26 10:56:35.59013",
-    "draft_updated_at": "2023-01-26 10:56:35",
-    "publish_name": "Subscription Creation",
-    "labels": [],
-    "text": null,
-    "publish_text": null,
-    "subject": null,
-    "publish_subject": null,
-    "from_email": null,
-    "publish_from_email": null,
-    "from_name": null,
-    "publish_from_name": null
-  },
-  {
-    "slug": "subscription-expiration",
-    "name": "Subscription Expiration",
-    "code": "<html></html>",
-    "publish_code": "<html></html>",
-    "published_at": "2023-01-26 10:57:04",
-    "created_at": "2023-01-26 10:57:00.46385",
-    "updated_at": "2023-01-26 10:57:04.11575",
-    "draft_updated_at": "2023-01-26 10:57:04",
-    "publish_name": "Subscription Expiration",
-    "labels": [],
-    "text": null,
-    "publish_text": null,
-    "subject": null,
-    "publish_subject": null,
-    "from_email": null,
-    "publish_from_email": null,
-    "from_name": null,
-    "publish_from_name": null
-  }
-]
-- 
2.34.1

